{"ast":null,"code":"import { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { LOGIN_CREDENTIALS } from 'src/app/shared/constant/credentials.const';\nimport { UserAccoundModel } from 'src/app/shared/model/user-account.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/shared/service/storage.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/icon\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"../../../../shared/components/base-toaster/base-toaster.component\";\n\nfunction LoginCardComponent_app_base_toaster_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"app-base-toaster\", 15);\n    i0.ɵɵlistener(\"onClose\", function LoginCardComponent_app_base_toaster_1_Template_app_base_toaster_onClose_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.onToasterClose());\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"message\", ctx_r0.toasterMessage)(\"type\", ctx_r0.toasterType);\n  }\n}\n\nfunction LoginCardComponent_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Username is required \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginCardComponent_mat_error_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let LoginCardComponent = /*#__PURE__*/(() => {\n  class LoginCardComponent {\n    constructor(fb, storageService, router) {\n      this.fb = fb;\n      this.storageService = storageService;\n      this.router = router;\n      this.hidePassword = true;\n      this.toasterShow = false;\n    }\n\n    ngOnInit() {\n      this.initFormLogin();\n    }\n\n    initFormLogin() {\n      this.loginForm = this.fb.group({\n        username: ['', Validators.required],\n        password: ['', Validators.required]\n      });\n    }\n\n    get username() {\n      return this.loginForm.get('username');\n    }\n\n    get password() {\n      return this.loginForm.get('password');\n    }\n\n    onClickLoginButton(e) {\n      if (this.loginForm.valid) {\n        const account = {\n          username: this.username?.value,\n          password: this.password?.value\n        };\n\n        if (account.username === LOGIN_CREDENTIALS.USERNAME && account.password === LOGIN_CREDENTIALS.PASSWORD) {\n          const userAccountData = new UserAccoundModel();\n          userAccountData.token = '123456789';\n          userAccountData.username = account.username;\n          userAccountData.passowrd = account.password;\n          this.storageService.storeAccount(userAccountData);\n          this.toasterMessage = 'Login successful!';\n          this.toasterType = 'success';\n          this.toasterShow = true;\n          setTimeout(() => {\n            if (this.storageService.getAccount()) {\n              this.router.navigate(['/dashboard/employee-list']);\n            }\n          }, 3000);\n        } else {\n          this.toasterMessage = 'Invalid username or password!';\n          this.toasterType = 'warning';\n          this.toasterShow = true;\n          this.loginForm.setErrors({\n            invalidCredentials: true\n          });\n        }\n      }\n    }\n\n    onToasterClose() {\n      this.toasterShow = false;\n    }\n\n  }\n\n  LoginCardComponent.ɵfac = function LoginCardComponent_Factory(t) {\n    return new (t || LoginCardComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.StorageService), i0.ɵɵdirectiveInject(i3.Router));\n  };\n\n  LoginCardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginCardComponent,\n    selectors: [[\"app-login-card\"]],\n    decls: 26,\n    vars: 11,\n    consts: [[3, \"message\", \"type\", \"onClose\", 4, \"ngIf\"], [1, \"login-form-container\", \"base-card\"], [1, \"left-container\"], [\"src\", \"./assets/images/img-office-login.jpg\", \"alt\", \"office\", 1, \"login-img\"], [1, \"right-container\"], [1, \"login-title\", \"sz-24\", \"font-600\"], [1, \"login-field\"], [3, \"formGroup\"], [\"appearance\", \"outline\", 3, \"hideRequiredMarker\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"username\", \"placeholder\", \"Input your username\"], [4, \"ngIf\"], [\"matInput\", \"\", \"formControlName\", \"password\", \"placeholder\", \"Input your password\", 3, \"type\"], [\"mat-icon-button\", \"\", \"matSuffix\", \"\", 3, \"click\"], [1, \"login-button\"], [\"mat-button\", \"\", 1, \"btn\", \"btn-md\", 3, \"disabled\", \"click\"], [3, \"message\", \"type\", \"onClose\"]],\n    template: function LoginCardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵtemplate(1, LoginCardComponent_app_base_toaster_1_Template, 1, 2, \"app-base-toaster\", 0);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 1)(3, \"div\", 2);\n        i0.ɵɵelement(4, \"img\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"div\", 5);\n        i0.ɵɵtext(7, \"BACKOFFICE\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 6)(9, \"form\", 7)(10, \"mat-form-field\", 8)(11, \"mat-label\");\n        i0.ɵɵtext(12, \"Username\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"input\", 9);\n        i0.ɵɵtemplate(14, LoginCardComponent_mat_error_14_Template, 2, 0, \"mat-error\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"mat-form-field\", 8)(16, \"mat-label\");\n        i0.ɵɵtext(17, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(18, \"input\", 11);\n        i0.ɵɵelementStart(19, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function LoginCardComponent_Template_button_click_19_listener() {\n          return ctx.hidePassword = !ctx.hidePassword;\n        });\n        i0.ɵɵelementStart(20, \"mat-icon\");\n        i0.ɵɵtext(21);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(22, LoginCardComponent_mat_error_22_Template, 2, 0, \"mat-error\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\", 13)(24, \"button\", 14);\n        i0.ɵɵlistener(\"click\", function LoginCardComponent_Template_button_click_24_listener($event) {\n          return ctx.onClickLoginButton($event);\n        });\n        i0.ɵɵtext(25, \" Login \");\n        i0.ɵɵelementEnd()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.toasterShow);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hideRequiredMarker\", true);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.username == null ? null : ctx.username.hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hideRequiredMarker\", true);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"type\", ctx.hidePassword ? \"password\" : \"text\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"aria-label\", \"Hide password\")(\"aria-pressed\", ctx.hidePassword);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.hidePassword ? \"visibility_off\" : \"visibility\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.password == null ? null : ctx.password.hasError(\"required\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid);\n      }\n    },\n    dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i5.MatError, i5.MatFormField, i5.MatLabel, i5.MatSuffix, i6.MatInput, i7.MatIcon, i8.MatButton, i9.BaseToasterComponent],\n    styles: [\".login-form-container[_ngcontent-%COMP%]{display:flex}.left-container[_ngcontent-%COMP%]{object-fit:cover;height:400px;width:400px;margin-right:60px}.left-container[_ngcontent-%COMP%]   .login-img[_ngcontent-%COMP%]{opacity:.7;max-width:-moz-fit-content;max-width:fit-content;max-height:100%;border-top-left-radius:15px;border-bottom-left-radius:15px}.right-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:center;align-items:center;margin:20px 30px;padding:20px 30px;width:300px;height:300px}.right-container[_ngcontent-%COMP%]   .login-title[_ngcontent-%COMP%]{margin-bottom:30px}.right-container[_ngcontent-%COMP%]   .login-field[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]{display:flex;flex-direction:column}\"]\n  });\n  return LoginCardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}